Index: src/main/java/ru/javawebinar/topjava/web/user/AdminRestController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/web/user/AdminRestController.java	(revision )
+++ src/main/java/ru/javawebinar/topjava/web/user/AdminRestController.java	(revision )
@@ -0,0 +1,36 @@
+package ru.javawebinar.topjava.web.user;
+
+import ru.javawebinar.topjava.model.User;
+
+import java.util.List;
+
+/**
+ * GKislin
+ * 06.03.2015.
+ */
+public class AdminRestController extends AbstractUserController {
+
+    public List<User> getAll() {
+        return super.getAll();
+    }
+
+    public User get(int id) {
+        return super.get(id);
+    }
+
+    public User create(User user) {
+        return super.create(user);
+    }
+
+    public void delete(int id) {
+        super.delete(id);
+    }
+
+    public void update(User user, int id) {
+        super.update(user, id);
+    }
+
+    public User getByMail(String email) {
+        return super.getByMail(email);
+    }
+}
Index: src/main/java/ru/javawebinar/topjava/service/UserServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/service/UserServiceImpl.java	(revision )
+++ src/main/java/ru/javawebinar/topjava/service/UserServiceImpl.java	(revision )
@@ -0,0 +1,41 @@
+package ru.javawebinar.topjava.service;
+
+import ru.javawebinar.topjava.model.User;
+import ru.javawebinar.topjava.repository.UserRepository;
+import ru.javawebinar.topjava.util.exception.ExceptionUtil;
+import ru.javawebinar.topjava.util.exception.NotFoundException;
+
+import java.util.List;
+
+/**
+ * GKislin
+ * 06.03.2015.
+ */
+public class UserServiceImpl implements UserService {
+
+    private UserRepository repository;
+
+    public User save(User user) {
+        return repository.save(user);
+    }
+
+    public void delete(int id) {
+        ExceptionUtil.checkNotFoundWithId(repository.delete(id), id);
+    }
+
+    public User get(int id) throws NotFoundException {
+        return ExceptionUtil.checkNotFoundWithId(repository.get(id), id);
+    }
+
+    public User getByEmail(String email) throws NotFoundException {
+        return ExceptionUtil.checkNotFound(repository.getByEmail(email), "email=" + email);
+    }
+
+    public List<User> getAll() {
+        return repository.getAll();
+    }
+
+    public void update(User user) {
+        repository.save(user);
+    }
+}
Index: src/main/java/ru/javawebinar/topjava/service/UserMealServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/service/UserMealServiceImpl.java	(revision )
+++ src/main/java/ru/javawebinar/topjava/service/UserMealServiceImpl.java	(revision )
@@ -0,0 +1,13 @@
+package ru.javawebinar.topjava.service;
+
+import ru.javawebinar.topjava.repository.UserMealRepository;
+
+/**
+ * GKislin
+ * 06.03.2015.
+ */
+public class UserMealServiceImpl implements UserMealService {
+
+    private UserMealRepository repository;
+
+}
Index: src/main/java/ru/javawebinar/topjava/web/meal/UserMealRestController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/web/meal/UserMealRestController.java	(revision )
+++ src/main/java/ru/javawebinar/topjava/web/meal/UserMealRestController.java	(revision )
@@ -0,0 +1,12 @@
+package ru.javawebinar.topjava.web.meal;
+
+import ru.javawebinar.topjava.service.UserMealService;
+
+/**
+ * GKislin
+ * 06.03.2015.
+ */
+public class UserMealRestController {
+    private UserMealService service;
+
+}
Index: src/main/java/ru/javawebinar/topjava/util/exception/ExceptionUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/util/exception/ExceptionUtil.java	(revision )
+++ src/main/java/ru/javawebinar/topjava/util/exception/ExceptionUtil.java	(revision )
@@ -0,0 +1,25 @@
+package ru.javawebinar.topjava.util.exception;
+
+
+/**
+ * User: gkislin
+ * Date: 14.05.2014
+ */
+public class ExceptionUtil {
+    public static void checkNotFoundWithId(boolean found, int id) {
+        checkNotFound(found, "id=" + id);
+    }
+
+    public static <T> T checkNotFoundWithId(T object, int id) {
+        return checkNotFound(object, "id=" + id);
+    }
+
+    public static <T> T checkNotFound(T object, String msg) {
+        checkNotFound(object != null, msg);
+        return object;
+    }
+
+    public static void checkNotFound(boolean found, String msg) {
+        if (!found) throw new NotFoundException("Not found entity with " + msg);
+    }
+}
Index: src/main/java/ru/javawebinar/topjava/model/NamedEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/model/NamedEntity.java	(revision )
+++ src/main/java/ru/javawebinar/topjava/model/NamedEntity.java	(revision )
@@ -0,0 +1,31 @@
+package ru.javawebinar.topjava.model;
+
+/**
+ * User: gkislin
+ * Date: 22.08.2014
+ */
+public class NamedEntity extends BaseEntity {
+
+    protected String name;
+
+    public NamedEntity() {
+    }
+
+    protected NamedEntity(Integer id, String name) {
+        super(id);
+        this.name = name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getName() {
+        return this.name;
+    }
+
+    @Override
+    public String toString() {
+        return name;
+    }
+}
Index: src/main/java/ru/javawebinar/topjava/web/user/ProfileRestController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/web/user/ProfileRestController.java	(revision )
+++ src/main/java/ru/javawebinar/topjava/web/user/ProfileRestController.java	(revision )
@@ -0,0 +1,23 @@
+package ru.javawebinar.topjava.web.user;
+
+import ru.javawebinar.topjava.LoggedUser;
+import ru.javawebinar.topjava.model.User;
+
+/**
+ * GKislin
+ * 06.03.2015.
+ */
+public class ProfileRestController extends AbstractUserController {
+
+    public User get() {
+        return super.get(LoggedUser.id());
+    }
+
+    public void delete() {
+        super.delete(LoggedUser.id());
+    }
+
+    public void update(User user) {
+        super.update(user, LoggedUser.id());
+    }
+}
\ No newline at end of file
Index: src/main/java/ru/javawebinar/topjava/service/UserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/service/UserService.java	(revision )
+++ src/main/java/ru/javawebinar/topjava/service/UserService.java	(revision )
@@ -0,0 +1,26 @@
+package ru.javawebinar.topjava.service;
+
+
+import ru.javawebinar.topjava.model.User;
+import ru.javawebinar.topjava.util.exception.NotFoundException;
+
+import java.util.List;
+
+/**
+ * User: gkislin
+ * Date: 22.08.2014
+ */
+public interface UserService {
+
+    User save(User user);
+
+    void delete(int id) throws NotFoundException;
+
+    User get(int id) throws NotFoundException;
+
+    User getByEmail(String email) throws NotFoundException;
+
+    List<User> getAll();
+
+    void update(User user);
+}
Index: src/main/java/ru/javawebinar/topjava/repository/UserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/repository/UserRepository.java	(revision )
+++ src/main/java/ru/javawebinar/topjava/repository/UserRepository.java	(revision )
@@ -0,0 +1,24 @@
+package ru.javawebinar.topjava.repository;
+
+import ru.javawebinar.topjava.model.User;
+
+import java.util.List;
+
+/**
+ * User: gkislin
+ * Date: 22.08.2014
+ */
+public interface UserRepository {
+    User save(User user);
+
+    // false if not found
+    boolean delete(int id);
+
+    // null if not found
+    User get(int id);
+
+    // null if not found
+    User getByEmail(String email);
+
+    List<User> getAll();
+}
Index: src/main/java/ru/javawebinar/topjava/model/BaseEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/model/BaseEntity.java	(revision )
+++ src/main/java/ru/javawebinar/topjava/model/BaseEntity.java	(revision )
@@ -0,0 +1,28 @@
+package ru.javawebinar.topjava.model;
+
+/**
+ * User: gkislin
+ * Date: 22.08.2014
+ */
+public class BaseEntity {
+    protected Integer id;
+
+    public BaseEntity() {
+    }
+
+    protected BaseEntity(Integer id) {
+        this.id = id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public Integer getId() {
+        return id;
+    }
+
+    public boolean isNew() {
+        return (this.id == null);
+    }
+}
Index: src/main/java/ru/javawebinar/topjava/web/user/AbstractUserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/web/user/AbstractUserController.java	(revision )
+++ src/main/java/ru/javawebinar/topjava/web/user/AbstractUserController.java	(revision )
@@ -0,0 +1,49 @@
+package ru.javawebinar.topjava.web.user;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import ru.javawebinar.topjava.model.User;
+import ru.javawebinar.topjava.service.UserService;
+
+import java.util.List;
+
+/**
+ * User: gkislin
+ */
+public abstract class AbstractUserController {
+    protected final Logger LOG = LoggerFactory.getLogger(getClass());
+
+    private UserService service;
+
+    public List<User> getAll() {
+        LOG.info("getAll");
+        return service.getAll();
+    }
+
+    public User get(int id) {
+        LOG.info("get " + id);
+        return service.get(id);
+    }
+
+    public User create(User user) {
+        user.setId(null);
+        LOG.info("create " + user);
+        return service.save(user);
+    }
+
+    public void delete(int id) {
+        LOG.info("delete " + id);
+        service.delete(id);
+    }
+
+    public void update(User user, int id) {
+        user.setId(id);
+        LOG.info("update " + user);
+        service.update(user);
+    }
+
+    public User getByMail(String email) {
+        LOG.info("getByEmail " + email);
+        return service.getByEmail(email);
+    }
+}
Index: src/main/java/ru/javawebinar/topjava/util/exception/NotFoundException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/util/exception/NotFoundException.java	(revision )
+++ src/main/java/ru/javawebinar/topjava/util/exception/NotFoundException.java	(revision )
@@ -0,0 +1,11 @@
+package ru.javawebinar.topjava.util.exception;
+
+/**
+ * User: gkislin
+ * Date: 19.08.2014
+ */
+public class NotFoundException extends RuntimeException {
+    public NotFoundException(String message) {
+        super(message);
+    }
+}
Index: src/main/java/ru/javawebinar/topjava/service/UserMealService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/service/UserMealService.java	(revision )
+++ src/main/java/ru/javawebinar/topjava/service/UserMealService.java	(revision )
@@ -0,0 +1,8 @@
+package ru.javawebinar.topjava.service;
+
+/**
+ * GKislin
+ * 15.06.2015.
+ */
+public interface UserMealService {
+}
Index: src/main/java/ru/javawebinar/topjava/LoggedUser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/LoggedUser.java	(revision )
+++ src/main/java/ru/javawebinar/topjava/LoggedUser.java	(revision )
@@ -0,0 +1,18 @@
+package ru.javawebinar.topjava;
+
+import ru.javawebinar.topjava.util.UserMealsUtil;
+
+/**
+ * GKislin
+ * 06.03.2015.
+ */
+public class LoggedUser {
+
+    public static int id() {
+        return 1;
+    }
+
+    public static int getCaloriesPerDay() {
+        return UserMealsUtil.DEFAULT_CALORIES_PER_DAY;
+    }
+}
Index: src/main/java/ru/javawebinar/topjava/model/Role.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/model/Role.java	(revision )
+++ src/main/java/ru/javawebinar/topjava/model/Role.java	(revision )
@@ -0,0 +1,10 @@
+package ru.javawebinar.topjava.model;
+
+/**
+ * User: gkislin
+ * Date: 22.08.2014
+ */
+public enum Role {
+    ROLE_USER,
+    ROLE_ADMIN
+}
Index: src/main/java/ru/javawebinar/topjava/model/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/model/User.java	(revision )
+++ src/main/java/ru/javawebinar/topjava/model/User.java	(revision )
@@ -0,0 +1,98 @@
+package ru.javawebinar.topjava.model;
+
+import ru.javawebinar.topjava.util.UserMealsUtil;
+
+import java.util.Date;
+import java.util.EnumSet;
+import java.util.Set;
+
+/**
+ * User: gkislin
+ * Date: 22.08.2014
+ */
+public class User extends NamedEntity {
+
+    protected String email;
+
+    protected String password;
+
+    protected boolean enabled = true;
+
+    protected Date registered = new Date();
+
+    protected Set<Role> roles;
+
+    protected int caloriesPerDay = UserMealsUtil.DEFAULT_CALORIES_PER_DAY;
+
+    public User() {
+    }
+
+    public User(Integer id, String name, String email, String password, Role role, Role... roles) {
+        this(id, name, email, password, UserMealsUtil.DEFAULT_CALORIES_PER_DAY, true, EnumSet.of(role, roles));
+    }
+
+    public User(Integer id, String name, String email, String password, int caloriesPerDay, boolean enabled, Set<Role> roles) {
+        super(id, name);
+        this.email = email;
+        this.password = password;
+        this.caloriesPerDay = caloriesPerDay;
+        this.enabled = enabled;
+        this.roles = roles;
+    }
+
+    public String getEmail() {
+        return email;
+    }
+
+    public void setEmail(String email) {
+        this.email = email;
+    }
+
+    public void setPassword(String password) {
+        this.password = password;
+    }
+
+    public Date getRegistered() {
+        return registered;
+    }
+
+    public void setRegistered(Date registered) {
+        this.registered = registered;
+    }
+
+    public void setEnabled(boolean enabled) {
+        this.enabled = enabled;
+    }
+
+    public int getCaloriesPerDay() {
+        return caloriesPerDay;
+    }
+
+    public void setCaloriesPerDay(int caloriesPerDay) {
+        this.caloriesPerDay = caloriesPerDay;
+    }
+
+    public boolean isEnabled() {
+        return enabled;
+    }
+
+    public Set<Role> getRoles() {
+        return roles;
+    }
+
+    public String getPassword() {
+        return password;
+    }
+
+    @Override
+    public String toString() {
+        return "User (" +
+                "id=" + id +
+                ", email=" + email +
+                ", name=" + name +
+                ", enabled=" + enabled +
+                ", roles=" + roles +
+                ", caloriesPerDay=" + caloriesPerDay +
+                ')';
+    }
+}
