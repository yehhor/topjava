Index: src/main/java/ru/javawebinar/topjava/repository/jdbc/Java8JdbcUserMealRepositoryImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/repository/jdbc/Java8JdbcUserMealRepositoryImpl.java	(revision )
+++ src/main/java/ru/javawebinar/topjava/repository/jdbc/Java8JdbcUserMealRepositoryImpl.java	(revision )
@@ -0,0 +1,31 @@
+package ru.javawebinar.topjava.repository.jdbc;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.annotation.Profile;
+import org.springframework.jdbc.core.BeanPropertyRowMapper;
+import org.springframework.stereotype.Repository;
+import ru.javawebinar.topjava.Profiles;
+import ru.javawebinar.topjava.model.UserMeal;
+
+import javax.sql.DataSource;
+import java.time.LocalDateTime;
+
+/**
+ * User: gkislin
+ * Date: 26.08.2014
+ */
+
+@Repository
+@Profile(Profiles.POSTGRES)
+public class Java8JdbcUserMealRepositoryImpl extends AbstractJdbcUserMealRepositoryImpl<LocalDateTime> {
+
+    @Autowired
+    public Java8JdbcUserMealRepositoryImpl(DataSource dataSource) {
+        super(BeanPropertyRowMapper.newInstance(UserMeal.class), dataSource);
+    }
+
+    @Override
+    protected LocalDateTime toDbValue(LocalDateTime ldt) {
+        return ldt;
+    }
+}
\ No newline at end of file
Index: src/main/java/ru/javawebinar/topjava/repository/jdbc/TimestampJdbcUserMealRepositoryImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/repository/jdbc/TimestampJdbcUserMealRepositoryImpl.java	(revision )
+++ src/main/java/ru/javawebinar/topjava/repository/jdbc/TimestampJdbcUserMealRepositoryImpl.java	(revision )
@@ -0,0 +1,34 @@
+package ru.javawebinar.topjava.repository.jdbc;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.annotation.Profile;
+import org.springframework.stereotype.Repository;
+import ru.javawebinar.topjava.Profiles;
+import ru.javawebinar.topjava.model.UserMeal;
+
+import javax.sql.DataSource;
+import java.sql.Timestamp;
+import java.time.LocalDateTime;
+
+/**
+ * User: gkislin
+ * Date: 26.08.2014
+ */
+
+@Repository
+@Profile(Profiles.HSQLDB)
+public class TimestampJdbcUserMealRepositoryImpl extends AbstractJdbcUserMealRepositoryImpl<Timestamp> {
+
+    @Autowired
+    public TimestampJdbcUserMealRepositoryImpl(DataSource dataSource) {
+        super((rs, rowNum) ->
+                new UserMeal(rs.getInt("id"), rs.getTimestamp("date_time").toLocalDateTime(),
+                        rs.getString("description"), rs.getInt("calories")), dataSource
+        );
+    }
+
+    @Override
+    protected Timestamp toDbValue(LocalDateTime ldt) {
+        return Timestamp.valueOf(ldt);
+    }
+}
\ No newline at end of file
Index: src/main/java/ru/javawebinar/topjava/repository/jdbc/JdbcUserMealRepositoryImpl.java
===================================================================
--- src/main/java/ru/javawebinar/topjava/repository/jdbc/JdbcUserMealRepositoryImpl.java	(date 1467647067000)
+++ src/main/java/ru/javawebinar/topjava/repository/jdbc/AbstractJdbcUserMealRepositoryImpl.java	(revision )
@@ -2,13 +2,11 @@
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.dao.support.DataAccessUtils;
-import org.springframework.jdbc.core.BeanPropertyRowMapper;
 import org.springframework.jdbc.core.JdbcTemplate;
 import org.springframework.jdbc.core.RowMapper;
 import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
 import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
 import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
-import org.springframework.stereotype.Repository;
 import ru.javawebinar.topjava.model.UserMeal;
 import ru.javawebinar.topjava.repository.UserMealRepository;
 
@@ -21,33 +19,34 @@
  * Date: 26.08.2014
  */
 
-@Repository
-public class JdbcUserMealRepositoryImpl implements UserMealRepository {
+public abstract class AbstractJdbcUserMealRepositoryImpl<T> implements UserMealRepository {
 
-    private static final RowMapper<UserMeal> ROW_MAPPER = BeanPropertyRowMapper.newInstance(UserMeal.class);
+    private SimpleJdbcInsert insertUserMeal;
 
+    private final RowMapper<UserMeal> rowMapper;
+
     @Autowired
     private JdbcTemplate jdbcTemplate;
 
     @Autowired
     private NamedParameterJdbcTemplate namedParameterJdbcTemplate;
 
-    private SimpleJdbcInsert insertUserMeal;
-
-    @Autowired
-    public JdbcUserMealRepositoryImpl(DataSource dataSource) {
+    public AbstractJdbcUserMealRepositoryImpl(RowMapper<UserMeal> rowMapper, DataSource dataSource) {
+        this.rowMapper = rowMapper;
         this.insertUserMeal = new SimpleJdbcInsert(dataSource)
                 .withTableName("meals")
                 .usingGeneratedKeyColumns("id");
     }
 
+    protected abstract T toDbValue(LocalDateTime ldt);
+
     @Override
     public UserMeal save(UserMeal userMeal, int userId) {
         MapSqlParameterSource map = new MapSqlParameterSource()
                 .addValue("id", userMeal.getId())
                 .addValue("description", userMeal.getDescription())
                 .addValue("calories", userMeal.getCalories())
-                .addValue("date_time", userMeal.getDateTime())
+                .addValue("date_time", toDbValue(userMeal.getDateTime()))
                 .addValue("user_id", userId);
 
         if (userMeal.isNew()) {
@@ -73,19 +72,19 @@
     @Override
     public UserMeal get(int id, int userId) {
         List<UserMeal> userMeals = jdbcTemplate.query(
-                "SELECT * FROM meals WHERE id = ? AND user_id = ?", ROW_MAPPER, id, userId);
+                "SELECT * FROM meals WHERE id = ? AND user_id = ?", rowMapper, id, userId);
         return DataAccessUtils.singleResult(userMeals);
     }
 
     public List<UserMeal> getAll(int userId) {
         return jdbcTemplate.query(
-                "SELECT * FROM meals WHERE user_id=? ORDER BY date_time DESC", ROW_MAPPER, userId);
+                "SELECT * FROM meals WHERE user_id=? ORDER BY date_time DESC", rowMapper, userId);
     }
 
     @Override
     public List<UserMeal> getBetween(LocalDateTime startDate, LocalDateTime endDate, int userId) {
         return jdbcTemplate.query(
                 "SELECT * FROM meals WHERE user_id=?  AND date_time BETWEEN  ? AND ? ORDER BY date_time DESC",
-                ROW_MAPPER, userId, startDate, endDate);
+                rowMapper, userId, toDbValue(startDate), toDbValue(endDate));
     }
 }
\ No newline at end of file
