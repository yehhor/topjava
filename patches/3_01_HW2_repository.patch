Index: src/main/java/ru/javawebinar/topjava/repository/mock/InMemoryUserMealRepositoryImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/repository/mock/InMemoryUserMealRepositoryImpl.java	(date 1465849306000)
+++ src/main/java/ru/javawebinar/topjava/repository/mock/InMemoryUserMealRepositoryImpl.java	(date 1465940521000)
@@ -1,48 +1,84 @@
 package ru.javawebinar.topjava.repository.mock;
 
+import org.springframework.stereotype.Repository;
 import ru.javawebinar.topjava.model.UserMeal;
 import ru.javawebinar.topjava.repository.UserMealRepository;
+import ru.javawebinar.topjava.util.TimeUtil;
 import ru.javawebinar.topjava.util.UserMealsUtil;
 
-import java.util.Collection;
-import java.util.Map;
+import java.time.LocalDateTime;
+import java.time.Month;
+import java.util.*;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.atomic.AtomicInteger;
+import java.util.stream.Collectors;
 
+import static ru.javawebinar.topjava.repository.mock.InMemoryUserRepositoryImpl.ADMIN_ID;
+import static ru.javawebinar.topjava.repository.mock.InMemoryUserRepositoryImpl.USER_ID;
+
 /**
  * GKislin
  * 15.09.2015.
  */
+@Repository
 public class InMemoryUserMealRepositoryImpl implements UserMealRepository {
-    private Map<Integer, UserMeal> repository = new ConcurrentHashMap<>();
+
+    private static final Comparator<UserMeal> USER_MEAL_COMPARATOR = Comparator.comparing(UserMeal::getDateTime).reversed();
+
+    // Map  userId -> (mealId-> meal)
+    private Map<Integer, Map<Integer, UserMeal>> repository = new ConcurrentHashMap<>();
     private AtomicInteger counter = new AtomicInteger(0);
 
     {
-        UserMealsUtil.MEAL_LIST.forEach(this::save);
+        UserMealsUtil.MEAL_LIST.forEach(um -> save(um, USER_ID));
+
+        save(new UserMeal(LocalDateTime.of(2015, Month.JUNE, 1, 14, 0), "Админ ланч", 510), ADMIN_ID);
+        save(new UserMeal(LocalDateTime.of(2015, Month.JUNE, 1, 21, 0), "Админ ужин", 1500), ADMIN_ID);
     }
 
     @Override
-    public UserMeal save(UserMeal userMeal) {
+    public UserMeal save(UserMeal userMeal, int userId) {
+        Objects.requireNonNull(userMeal);
+
+        Integer mealId = userMeal.getId();
+
         if (userMeal.isNew()) {
-            userMeal.setId(counter.incrementAndGet());
+            mealId = counter.incrementAndGet();
+            userMeal.setId(mealId);
+        } else if (get(mealId, userId) == null) {
+            return null;
         }
-        repository.put(userMeal.getId(), userMeal);
+        Map<Integer, UserMeal> userMeals = repository.computeIfAbsent(userId, ConcurrentHashMap::new);
+        userMeals.put(mealId, userMeal);
         return userMeal;
     }
 
     @Override
-    public void delete(int id) {
-        repository.remove(id);
+    public boolean delete(int id, int userId) {
+        Map<Integer, UserMeal> userMeals = repository.get(userId);
+        return userMeals != null && userMeals.remove(id) != null;
     }
 
     @Override
-    public UserMeal get(int id) {
-        return repository.get(id);
+    public UserMeal get(int id, int userId) {
+        Map<Integer, UserMeal> userMeals = repository.get(userId);
+        return userMeals == null ? null : userMeals.get(id);
     }
 
     @Override
-    public Collection<UserMeal> getAll() {
-        return repository.values();
+    public Collection<UserMeal> getAll(int userId) {
+        Map<Integer, UserMeal> userMeals = repository.get(userId);
+        return userMeals == null ?
+                Collections.emptyList() :
+                userMeals.values().stream().sorted(USER_MEAL_COMPARATOR).collect(Collectors.toList());
     }
-}
 
+    @Override
+    public Collection<UserMeal> getBetween(LocalDateTime startDateTime, LocalDateTime endDateTime, int userId) {
+        Objects.requireNonNull(startDateTime);
+        Objects.requireNonNull(endDateTime);
+        return getAll(userId).stream()
+                .filter(um -> TimeUtil.isBetween(um.getDateTime(), startDateTime, endDateTime))
+                .collect(Collectors.toList());
+    }
+}
Index: src/main/java/ru/javawebinar/topjava/repository/mock/InMemoryUserRepositoryImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/repository/mock/InMemoryUserRepositoryImpl.java	(date 1465940521000)
+++ src/main/java/ru/javawebinar/topjava/repository/mock/InMemoryUserRepositoryImpl.java	(date 1465940521000)
@@ -0,0 +1,64 @@
+package ru.javawebinar.topjava.repository.mock;
+
+import org.springframework.stereotype.Repository;
+import ru.javawebinar.topjava.model.User;
+import ru.javawebinar.topjava.repository.UserRepository;
+
+import java.util.Comparator;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.stream.Collectors;
+
+/**
+ * GKislin
+ * 15.06.2015.
+ */
+@Repository
+public class InMemoryUserRepositoryImpl implements UserRepository {
+    private Map<Integer, User> repository = new ConcurrentHashMap<>();
+    private AtomicInteger counter = new AtomicInteger(0);
+
+    private static final Comparator<User> USER_COMPARATOR = Comparator.comparing(User::getName);
+
+    public static final int USER_ID = 1;
+    public static final int ADMIN_ID = 2;
+
+    @Override
+    public User save(User user) {
+        Objects.requireNonNull(user);
+        if (user.isNew()) {
+            user.setId(counter.incrementAndGet());
+        }
+        repository.put(user.getId(), user);
+        return user;
+    }
+
+    @Override
+    public boolean delete(int id) {
+        return repository.remove(id) != null;
+    }
+
+    @Override
+    public User get(int id) {
+        return repository.get(id);
+    }
+
+    @Override
+    public List<User> getAll() {
+        return repository.values().stream()
+                .sorted(USER_COMPARATOR)
+                .collect(Collectors.toList());
+    }
+
+    @Override
+    public User getByEmail(String email) {
+        Objects.requireNonNull(email);
+        return repository.values().stream()
+                .filter(u -> email.equals(u.getEmail()))
+                .findFirst()
+                .orElse(null);
+    }
+}
Index: src/main/java/ru/javawebinar/topjava/repository/mock/MockUserRepositoryImpl.java
===================================================================
--- src/main/java/ru/javawebinar/topjava/repository/mock/MockUserRepositoryImpl.java	(date 1465849306000)
+++ src/main/java/ru/javawebinar/topjava/repository/mock/MockUserRepositoryImpl.java	(date 1465849306000)
@@ -1,49 +0,0 @@
-package ru.javawebinar.topjava.repository.mock;
-
-import org.springframework.stereotype.Repository;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import ru.javawebinar.topjava.model.User;
-import ru.javawebinar.topjava.repository.UserRepository;
-
-import java.util.Collections;
-import java.util.List;
-
-/**
- * GKislin
- * 15.06.2015.
- */
-@Repository
-public class MockUserRepositoryImpl implements UserRepository {
-    private static final Logger LOG = LoggerFactory.getLogger(MockUserRepositoryImpl.class);
-
-    @Override
-    public boolean delete(int id) {
-        LOG.info("delete " + id);
-        return true;
-    }
-
-    @Override
-    public User save(User user) {
-        LOG.info("save " + user);
-        return user;
-    }
-
-    @Override
-    public User get(int id) {
-        LOG.info("get " + id);
-        return null;
-    }
-
-    @Override
-    public List<User> getAll() {
-        LOG.info("getAll");
-        return Collections.emptyList();
-    }
-
-    @Override
-    public User getByEmail(String email) {
-        LOG.info("getByEmail " + email);
-        return null;
-    }
-}
Index: src/main/java/ru/javawebinar/topjava/repository/UserMealRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/repository/UserMealRepository.java	(date 1465849306000)
+++ src/main/java/ru/javawebinar/topjava/repository/UserMealRepository.java	(date 1465940521000)
@@ -2,6 +2,7 @@
 
 import ru.javawebinar.topjava.model.UserMeal;
 
+import java.time.LocalDateTime;
 import java.util.Collection;
 
 /**
@@ -9,11 +10,18 @@
  * 06.03.2015.
  */
 public interface UserMealRepository {
-    UserMeal save(UserMeal userMeal);
+    // null if updated meal do not belong to userId
+    UserMeal save(UserMeal userMeal, int userId);
 
-    void delete(int id);
+    // false if meal do not belong to userId
+    boolean delete(int id, int userId);
 
-    UserMeal get(int id);
+    // null if meal do not belong to userId
+    UserMeal get(int id, int userId);
 
-    Collection<UserMeal> getAll();
+    // ORDERED dateTime
+    Collection<UserMeal> getAll(int userId);
+
+    // ORDERED dateTime
+    Collection<UserMeal> getBetween(LocalDateTime startDate, LocalDateTime endDate, int userId);
 }
Index: src/main/java/ru/javawebinar/topjava/util/TimeUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/util/TimeUtil.java	(date 1465849306000)
+++ src/main/java/ru/javawebinar/topjava/util/TimeUtil.java	(date 1465940521000)
@@ -1,7 +1,6 @@
 package ru.javawebinar.topjava.util;
 
 import java.time.LocalDateTime;
-import java.time.LocalTime;
 import java.time.format.DateTimeFormatter;
 
 /**
@@ -9,10 +8,10 @@
  * 07.01.2015.
  */
 public class TimeUtil {
-    public static final DateTimeFormatter DATE_TME_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
+    private static final DateTimeFormatter DATE_TME_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
 
-    public static boolean isBetween(LocalTime lt, LocalTime startTime, LocalTime endTime) {
-        return lt.compareTo(startTime) >= 0 && lt.compareTo(endTime) <= 0;
+    public static <T extends Comparable<? super T>> boolean isBetween(T value, T start, T end) {
+        return value.compareTo(start) >= 0 && value.compareTo(end) <= 0;
     }
 
     public static String toString(LocalDateTime ldt) {
Index: src/main/java/ru/javawebinar/topjava/web/MealServlet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/web/MealServlet.java	(date 1465849306000)
+++ src/main/java/ru/javawebinar/topjava/web/MealServlet.java	(date 1465940521000)
@@ -1,10 +1,11 @@
 package ru.javawebinar.topjava.web;
 
+import ru.javawebinar.topjava.LoggedUser;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import ru.javawebinar.topjava.model.UserMeal;
-import ru.javawebinar.topjava.repository.mock.InMemoryUserMealRepositoryImpl;
 import ru.javawebinar.topjava.repository.UserMealRepository;
+import ru.javawebinar.topjava.repository.mock.InMemoryUserMealRepositoryImpl;
 import ru.javawebinar.topjava.util.UserMealsUtil;
 
 import javax.servlet.ServletConfig;
@@ -39,7 +40,7 @@
                 request.getParameter("description"),
                 Integer.valueOf(request.getParameter("calories")));
         LOG.info(userMeal.isNew() ? "Create {}" : "Update {}", userMeal);
-        repository.save(userMeal);
+        repository.save(userMeal, LoggedUser.id());
         response.sendRedirect("meals");
     }
 
@@ -49,17 +50,17 @@
         if (action == null) {
             LOG.info("getAll");
             request.setAttribute("mealList",
-                    UserMealsUtil.getWithExceeded(repository.getAll(), UserMealsUtil.DEFAULT_CALORIES_PER_DAY));
+                    UserMealsUtil.getWithExceeded(repository.getAll(LoggedUser.id()), UserMealsUtil.DEFAULT_CALORIES_PER_DAY));
             request.getRequestDispatcher("/mealList.jsp").forward(request, response);
         } else if (action.equals("delete")) {
             int id = getId(request);
             LOG.info("Delete {}", id);
-            repository.delete(id);
+            repository.delete(id, LoggedUser.id());
             response.sendRedirect("meals");
         } else if (action.equals("create") || action.equals("update")) {
             final UserMeal meal = action.equals("create") ?
                     new UserMeal(LocalDateTime.now().withNano(0).withSecond(0), "", 1000) :
-                    repository.get(getId(request));
+                    repository.get(getId(request), LoggedUser.id());
             request.setAttribute("meal", meal);
             request.getRequestDispatcher("mealEdit.jsp").forward(request, response);
         }
